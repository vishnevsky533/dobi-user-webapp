'use client';

import { useEffect, useState } from 'react';
import Loading from '@/components/Loading';
import Button from '@/components/Button';

export default function PromotionPage({ params }) {
    const { publicationId } = params;
    const [telegramUserId, setTelegramUserId] = useState(null);
    const [statusMessage, setStatusMessage] = useState('');
    const [isLoading, setIsLoading] = useState(true);
    const [isSuccess, setIsSuccess] = useState(false);
    const [showOpenBotButton, setShowOpenBotButton] = useState(false);
    const [showRules, setShowRules] = useState(false);
    const [rulesAccepted, setRulesAccepted] = useState(false);
    const [waitingForBotLaunch, setWaitingForBotLaunch] = useState(false);

    useEffect(() => {
        const tg = window.Telegram.WebApp;
        tg.expand();

        const initDataUnsafe = tg.initDataUnsafe;
        const userId = initDataUnsafe?.user?.id;
        setTelegramUserId(userId);

        if (userId && publicationId) {
            checkAndRegisterUser(userId, publicationId);
        } else {
            setStatusMessage('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–∫—Ü–∏–∏.');
            setIsLoading(false);
        }
    }, []);

    useEffect(() => {
        if (waitingForBotLaunch) {
            const timeout = setTimeout(() => {
                setStatusMessage('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                setWaitingForBotLaunch(false);
                setShowOpenBotButton(false);
            }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

            return () => clearTimeout(timeout);
        }
    }, [waitingForBotLaunch]);

    const checkAndRegisterUser = async (userId, publicationId) => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResponse = await fetch(`/api/users/${userId}`);
            if (userResponse.ok) {
                const user = await userResponse.json();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
                const botBlockedResponse = await fetch(`/api/users/${userId}/is_bot_blocked`);
                const botBlockedData = await botBlockedResponse.json();
                const botBlocked = botBlockedData.blocked;

                if (botBlocked) {
                    setStatusMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ.');
                    setShowOpenBotButton(true);
                } else {
                    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ü–∏–∏
                    const registrationResponse = await fetch(`/api/promotions/register`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId, publicationId }),
                    });

                    if (registrationResponse.ok) {
                        setStatusMessage('–£—Å–ø–µ—à–Ω–æ! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏—â–∏—Ç–µ –≤ –±–æ—Ç–µ, –æ–Ω —É–∂–µ –µ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º üëç');
                        setIsSuccess(true);
                        setShowOpenBotButton(true);
                    } else {
                        setStatusMessage('–û–π! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –∞–∫—Ü–∏–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ—Å—Ç–∞ üò¢');
                    }
                }
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞
                setStatusMessage('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.');
                setShowRules(true);
            }
        } catch (error) {
            console.error(error);
            setStatusMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
        } finally {
            setIsLoading(false);
        }
    };

    const openBot = () => {
        window.location.href = `https://t.me/${process.env.NEXT_PUBLIC_BOT_USERNAME}`;
    };

    const acceptRules = () => {
        setRulesAccepted(true);
    };

    const startWaitingForBotLaunch = () => {
        setWaitingForBotLaunch(true);
        setShowOpenBotButton(true);
        setStatusMessage('–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å. –ß—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ - –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
    };

    return (
        <div>
            {isLoading ? (
                <Loading />
            ) : (
                <div className="space-y-4">
                    <p>{statusMessage}</p>

                    {showRules && !rulesAccepted && (
                        <div>
                            <Button onClick={acceptRules}>–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–≤–∏–ª–∞</Button>
                        </div>
                    )}

                    {rulesAccepted && !waitingForBotLaunch && (
                        <div>
                            <p>–ù–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞:</p>
                            <ol className="list-decimal list-inside">
                                <li>–û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ –≤ 3-—Ö –∞–∫—Ü–∏—è—Ö!</li>
                                {/* –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ */}
                            </ol>
                            <Button onClick={startWaitingForBotLaunch}>–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞</Button>
                        </div>
                    )}

                    {showOpenBotButton && (
                        <Button onClick={openBot}>–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞</Button>
                    )}
                </div>
            )}
        </div>
    );
}
